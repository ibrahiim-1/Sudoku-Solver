#include <iostream>
#include<Windows.h>
#include<conio.h>

using namespace std;
const int N = 9;
const int x = 4;

void welcomePage();
void mainmenu();
void menu();
void cases();
void printHard(int arr[N][N]);
void printEasy(int arr[x][x]);
void easySudoku();
bool solveEasySudoku(int matrix[x][x], int row, int col);
bool solveHardSudoku(int matrix[N][N], int row, int col);
void HardSudoku();
//#define N 9

void welcomePage() {
	system("cls");
	Sleep(20);
	for (int i = 1; i < 135; i++)
	{
		if (i < 80)
		{
			Sleep(5);
		}
		else
		{
			Sleep(5);
		}
		cout << "_";
	}
	system("cls");
	string ggg;
	ggg = "SUDOKU SOLVER";
	cout << "\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t   ==================================\n\n\n\t\t\t\t\t\t\t     ";
	for (int i = 0; i <= ggg.length(); i++) {
		cout << ggg[i];
		Sleep(5);
	}
	cout << "\n\n\n\t\t\t\t\t\t   ==================================";
	string abc = "Press any key to start!";
	cout << "\n\n\t\t\t\t\t\t\t";
	for (int i = 0; i <= abc.length(); i++) {
		cout << abc[i];
		Sleep(5);
	}
	_getch();
	system("cls");
	mainmenu();

};
void mainmenu() {
	system("cls");
	cout << "\n\n\n\n\n\n\n\n\n\n";
	cout << "\t\t\t\t\t\t==================================";
	cout << "\n\t\t\t\t\t\t==================================";
	cout << "\n\n\t\t\t\t\t\t\t   SELECT LEVEL\n" << endl;
	cout << "\t\t\t\t\t\t\t    1. Easy" << endl;
	cout << "\t\t\t\t\t\t\t    2. Hard" << endl;
	cout << "\n\n\t\t\t\t\t\t==================================";
	cout << "\n\t\t\t\t\t\t==================================\n\n\n";
	int a;
	cin >> a;
	system("cls");
	switch (a) {
	case 1:
		easySudoku();
		break;
	case 2:
		HardSudoku();
		break;

	}

}
void easySudoku() {
	system("cls");
	cout << "\n\n\n\n\n\n\n\n\n\n";
	cout << "\t\t\t\t\t\t==================================";
	cout << "\n\t\t\t\t\t\t==================================";
	cout << "\n\n\n\t\t\t\t\t\t   1. Solve your 4*4 Sudoku" << endl;
	cout << "\t\t\t\t\t\t   2. Solve example 4*4 Sudoku" << endl;
	cout << "\t\t\t\t\t\t   3. How to solve!" << endl;
	cout << "\t\t\t\t\t\t   4. Back to Main Menu!" << endl;
	cout << "\t\t\t\t\t\t   5. Exit" << endl;
	cout << "\n\n\t\t\t\t\t\t==================================";
	cout << "\n\t\t\t\t\t\t==================================\n\n\n";

hh:
	int a;
	cin >> a;
	system("cls");
	if (a == 1) {
		cout << "\n\nEnter your Sudoku. Enter '0' in place of unsolved grids!\nEnter Values from 0-4\n";
		int matrix1[x][x], a;
		for (int i = 0; i < x; i++) {
			cout << "\n\nEnter Row " << i + 1 << ":\n";
			for (int j = 0; j < x; j++) {
			p:
				cin >> a;
				matrix1[i][j] = a;
				if (a < 0 || a > 9) {
					cout << "Wrong value Entered!\nEnter value again(0-4):";
					goto p;
				}
			}
			_getch();
		}
	g:
		system("cls");
		cout << "\n\nYour entered Sudoku is:\n";
		printEasy(matrix1);
		cout << "\nPress any key to continue!";
		_getch();

		cout << "\n\n\n";
		cout << "\t\t\t\t\t\t==================================";
		cout << "\n\t\t\t\t\t\t==================================";
		cout << "\n\n\n\t\t\t\t\t\t\t1. Get Solution" << endl;
		cout << "\t\t\t\t\t\t\t2. correct any grid" << endl;
		cout << "\n\n\t\t\t\t\t\t==================================";
		cout << "\n\t\t\t\t\t\t==================================\n\n\n";
		int d;
		cin >> d;
		switch (d) {
		case 1:
			system("cls");
			cout << "\n\nYour entered Sudoku is:\n";
			printEasy(matrix1);

			if (solveEasySudoku(matrix1, 0, 0))
			{
				cout << "\n\n Solved Sudoku:\n";
				printEasy(matrix1);
				cout << "\n\nPress any key to go to main menu!";
				_getch();
				mainmenu();

			}
			else
				cout << "No solution exists " << endl;
			cout << "\n\nPress any key to go to main menu!";
			_getch();
			mainmenu();
			break;

		case 2:
			int aa, bb, cc;
		q:
			cout << "\nEnter row of Grid to correct: ";
			cin >> aa;
			if (aa < 0 || aa>3) {
				cout << "\nWrong value entered. please enter row number from 0-3: ";
				goto q;
			}

		w:
			cout << "\nEnter column of Grid to correct: ";
			cin >> bb;

			if (bb < 0 || bb>3) {
				cout << "\nWrong value entered. please enter column number from 0-3: ";
				goto w;
			}

		e:	cout << "\nEnter new value at " << aa << " row and " << bb << " column: ";
			cin >> cc;
			if (cc < 0 || cc>4) {
				cout << "\nWrong value entered. please enter values from 0-4: ";
				goto e;
			}
			matrix1[aa][bb] = cc;
			goto g;
		}
	}
	else if (a == 2) {
		int matrix2[x][x] = {

		{ 2, 0, 0, 0 },
		{ 0, 1, 3, 0 },
		{ 3, 0, 0, 1 },
		{ 0, 2, 4, 0 },
		};

		system("cls");
		cout << "\n\nExample Sudoku is:";
		printEasy(matrix2);
		cout << "\n\nPress any key to get Solution!";
		_getch();

		if (solveEasySudoku(matrix2, 0, 0))
		{
			cout << "\n\nSolved Sudoku is:";
			printEasy(matrix2);
			cout << "\n\nPress any key to go to main menu!";
			_getch();
			mainmenu();
		}
		else
		{
			cout << "No solution exists " << endl;
			cout << "\n\nPress any key to go to main menu!";
			_getch();
			mainmenu();

		}
	}
	else if (a == 3) {

		system("cls");
		cout << "Fill each row and column with the numbers 1 through 4 \nwithout repetition, ensuring each 2x2 box contains all digits";
		cout << "\n\nPress any key to go to main menu!";
		_getch();
		mainmenu();
	}
	else if (a == 4) {
		mainmenu();
	}
	else if (a == 5) {
		exit;
	}
	else {
		cout << "\nWrong number entered. kindly enter yor choice again :";
		goto hh;
	}
}

void HardSudoku() {
	cout << "\n\n\n\n\n\n\n\n\n\n";
	cout << "\t\t\t\t\t\t==================================";
	cout << "\n\t\t\t\t\t\t==================================";
	cout << "\n\n\n\t\t\t\t\t\t    1. Solve your 9*9 Sudoku" << endl;
	cout << "\t\t\t\t\t\t    2. Solve example 9*9 Sudoku" << endl;
	cout << "\t\t\t\t\t\t    3. How to solve!" << endl;
	cout << "\t\t\t\t\t\t    4. Back to main menu!" << endl;
	cout << "\t\t\t\t\t\t    5. Exit" << endl;
	cout << "\n\n\t\t\t\t\t\t==================================";
	cout << "\n\t\t\t\t\t\t==================================\n\n\n";

	cases();

}

void cases() {
	int a;
	cin >> a;
	system("cls");
	if (a == 1) {
		cout << "\n\nEnter your Sudoku. Enter '0' in place of unsolved grids!\nEnter Values from 0-9\n";
		int matrix3[N][N], a;
		for (int i = 0; i < N; i++) {
			cout << "\n\nEnter Row " << i + 1 << ":\n";
			for (int j = 0; j < N; j++) {
			p:
				cin >> a;
				matrix3[i][j] = a;
				if (a < 0 || a > 9) {
					cout << "Wrong value Entered!\nEnter value again(0-9):";
					goto p;
				}
			}
			_getch();
		}
	g:
		system("cls");
		cout << "\n\nYour entered Sudoku is:\n";
		printHard(matrix3);
		cout << "\nPress any key to continue!";
		_getch();

		cout << "\n\n\n";
		cout << "\t\t\t\t\t\t==================================";
		cout << "\n\t\t\t\t\t\t==================================";
		cout << "\n\n\n\t\t\t\t\t\t\t1. Get Solution" << endl;
		cout << "\t\t\t\t\t\t\t2. correct any grid" << endl;
		cout << "\n\n\t\t\t\t\t\t==================================";
		cout << "\n\t\t\t\t\t\t==================================\n\n\n";
		int d;
		cin >> d;
		switch (d) {
		case 1:
			system("cls");
			cout << "\n\nYour entered Sudoku is:\n";
			printHard(matrix3);
			if (solveHardSudoku(matrix3, 0, 0))
			{
				cout << "\n\n Solved Sudoku:\n";
				printHard(matrix3);
				cout << "\n\nPress any key to go to main menu!";
				_getch();
				mainmenu();

			}
			else
				cout << "No solution exists " << endl;
			cout << "\n\nPress any key to go to main menu!";
			_getch();
			mainmenu();
			break;

		case 2:
			int aa, bb, cc;
		q:
			cout << "\nEnter row of Grid to correct: ";
			cin >> aa;
			if (aa < 0 || aa>3) {
				cout << "\nWrong value entered. please enter row number from 0-3: ";
				goto q;
			}

		w:
			cout << "\nEnter column of Grid to correct: ";
			cin >> bb;

			if (bb < 0 || bb>3) {
				cout << "\nWrong value entered. please enter column number from 0-3: ";
				goto w;
			}

		e:	cout << "\nEnter new value at " << aa << " row and " << bb << " column: ";
			cin >> cc;
			if (cc < 0 || cc>4) {
				cout << "\nWrong value entered. please enter values from 0-4: ";
				goto e;
			}
			matrix3[aa][bb] = cc;
			goto g;
		}

		if (solveHardSudoku(matrix3, 0, 0))
		{
			cout << "\n\n Solved Sudoku:\n";
			printHard(matrix3);
			cout << "\n\nPress any key to go to main menu!";
			_getch();
			mainmenu();
		}
		else
			cout << "No solution exists " << endl;
		cout << "\n\nPress any key to go to main menu!";
		_getch();
		mainmenu();
	}
	else if (a == 2) {
		int matrix4[N][N] = {

		{ 3, 0, 6, 5, 0, 8, 4, 0, 0 },
		{ 5, 2, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 8, 7, 0, 0, 0, 0, 3, 1 },
		{ 0, 0, 3, 0, 1, 0, 0, 8, 0 },
		{ 9, 0, 0, 8, 6, 3, 0, 0, 5 },
		{ 0, 5, 0, 0, 9, 0, 6, 0, 0 },
		{ 1, 3, 0, 0, 0, 0, 2, 5, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 7, 4 },
		{ 0, 0, 5, 2, 0, 6, 3, 0, 0 }
		};

		system("cls");
		cout << "\n\nExample Sudoku is:";
		printHard(matrix4);
		cout << "\nPress any key to get Solution!";
		_getch();

		if (solveHardSudoku(matrix4, 0, 0))
		{
			cout << "\n\nSolved Sudoku is:";
			printHard(matrix4);
			cout << "\n\nPress any key to go to main menu!";
			_getch();
			mainmenu();
			exit;
		}
		else
		{
			cout << "No solution exists " << endl;
			cout << "\nPress any key too go to main menu";
			mainmenu();
		}

	}
	else if (a == 3) {

		system("cls");
		cout << "1. Fill in Known Values : Start by filling in any cells that are already given in the puzzle.";
		cout << "\n\n2. Use Process of Elimination : For each empty cell, determine which numbers(1 - 9) are\n   missing from its row, column, and 3x3 subgrid.";
		cout << "\n\n3. Apply Logical Deductions : Use logical reasoning to place numbers, such as identifying \n   cells that have only one possible number(single possibility) or cells where a particular\n   number can only go in one place within a row, column, or subgrid(single candidate).";
		cout << "\n\n4. Iterate and Refine : Continue the process, checking and updating each cell, until the \n   puzzle is complete.If stuck, backtrack and try alternative placements.";
		cout << "\n\n\npress any key to retutn to main menu!";
		_getch();
		mainmenu();
	}
	else if (a == 4) {

		mainmenu();
	}
	else if (a == 5) {
		exit;
	}
	else {
		cout << "Wrong value entered. Enter your choice again: ";
		cases();
	}
}
void printHard(int arr[N][N])
{
	cout << "\n\n";
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
			cout << "  " << arr[i][j] << " ";
		cout << endl;
	}
}
void printEasy(int arr[x][x])
{
	cout << "\n\n";
	for (int i = 0; i < x; i++)
	{
		for (int j = 0; j < x; j++)
			cout << "  " << arr[i][j] << " ";
		cout << endl;
	}
}
// Checks whether it will be 
// legal to assign num to the
// given row, col

bool isSafeHard(int matrix[N][N], int row, int col, int num)
{
	// Check if we find the same num 
	// in the similar row , we
	// return false
	for (int X = 0; X <= 8; X++)
		if (matrix[row][X] == num)
			return false;

	// Check if we find the same num in 
	// the similar column , we
	// return false
	for (int X = 0; X <= 8; X++)
		if (matrix[X][col] == num)
			return false;

	// Check if we find the same num in 
	// the particular 3*3 matrix,
	// we return false
	int startRow = row - row % 3,
		startCol = col - col % 3;

	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			if (matrix[i + startRow][j + startCol] == num)
			{
				return false;
			}
		}
	}
	return true;
}

bool isSafeEasy(int matrix[x][x], int row, int col, int num)
{
	// Check if we find the same num 
	// in the similar row , we
	// return false
	for (int X = 0; X <= 3; X++)
		if (matrix[row][X] == num)
			return false;

	// Check if we find the same num in 
	// the similar column , we
	// return false
	for (int X = 0; X <= 3; X++)
		if (matrix[X][col] == num)
			return false;
	return true;
}


bool solveHardSudoku(int matrix[N][N], int row, int col)
{
	// Check if we have reached the 8th 
	// row and 9th column, we are 
	// returning true to avoid
	// further backtracking
	if (row == N - 1 && col == N)
	{
		return true;
	}
	// Check if column value becomes 9, 
	// we move to next row and
	// column start from 0
	if (col == N) {
		row++;
		col = 0;
	}

	// Check if the current position of 
	// the matrix already contains
	// value >0, we iterate for next column
	if (matrix[row][col] > 0)
		return solveHardSudoku(matrix, row, col + 1);

	for (int num = 1; num <= N; num++)
	{

		// Check if it is safe to place 
		// the num (1-9) in the
		// given row ,col ->we 
		// move to next column
		if (isSafeHard(matrix, row, col, num))
		{
			matrix[row][col] = num;

			// Checking for next possibility with next column
			if (solveHardSudoku(matrix, row, col + 1))
				return true;
		}

		// Removing the assigned num , 
		// since our assumption
		// was wrong , and we go for 
		// next assumption with
		// diff num value
		matrix[row][col] = 0;
	}
	return false;
}

bool solveEasySudoku(int matrix[x][x], int row, int col)
{
	// Check if we have reached the 8th 
	// row and 9th column, we are 
	// returning true to avoid
	// further backtracking
	if (row == x - 1 && col == x)
	{
		return true;
	}
	// Check if column value becomes 9, 
	// we move to next row and
	// column start from 0
	if (col == x) {
		row++;
		col = 0;
	}

	// Check if the current position of 
	// the matrix already contains
	// value >0, we iterate for next column
	if (matrix[row][col] > 0)
		return solveEasySudoku(matrix, row, col + 1);

	for (int num = 1; num <= x; num++)
	{

		// Check if it is safe to place 
		// the num (1-9) in the
		// given row ,col ->we 
		// move to next column
		if (isSafeEasy(matrix, row, col, num))
		{
			matrix[row][col] = num;

			// Checking for next possibility with next column
			if (solveEasySudoku(matrix, row, col + 1))
				return true;
		}

		// Removing the assigned num , 
		// since our assumption
		// was wrong , and we go for 
		// next assumption with
		// diff num value
		matrix[row][col] = 0;
	}
	return false;
}

// Driver Code
int main()
{
	welcomePage();
	return 0;
}
